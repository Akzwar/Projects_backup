#include "testApp.h"
using namespace std;
//--------------------------------------------------------------
long double minld(long double a, long double b)
{
    if(a<b)
        return a;
    else
        return b;
}

long double maxld(long double a, long double b)
{
    if(a>b)
        return a;
    else
        return b;
}

testApp::testApp()
{
    Model M;

    Rung = Integrator( M, 0.0, 20, 0.000001);
}


DrawPoint prev;
void testApp::setup(){
    ofBackground(0, 0, 20);
    prev.x = 0;
    prev.y = 0;

}

//--------------------------------------------------------------
//#define COUNT 10000
//double delta = 0.01;
//DrawPoint Va[COUNT];
void testApp::update(){
  if(Rung.getT() < Rung.tk)
    Rung.NextStep();
   // 
  /*  {
        for( int i=0; i < COUNT; i++ )
        {
            Rung.NextStep();
            Va[i].x = Rung.CurrVect.Y1;
            Va[i].y = Rung.CurrVect.Y2;
        }
    }
    //prev.x = Va[0].x;
    //prev.y = Va[0].y;
    for( int i = 0; i < COUNT; i++ )
    {
        if ((abs(prev.x - Va[i].x) > delta) || (abs(prev.y - Va[i].y) > delta))
        {
            prev.x = Va[i].x;
            prev.y = Va[i].y;
            Result.push_back(Va[i]);
        }
    }
    
   if(Rung.getT() < Rung.tk){
        prev.x = Va[0].x;
        prev.y = Va[0].y;
    for(int i=0;i<COUNT;i++)
    {
        Rung.NextStep();
        Va[i].x = Rung.CurrVect.Y1;
        Va[i].y = Rung.CurrVect.Y2;
        if ((abs(prev.x - Va[i].x) > delta) || (abs(prev.y - Va[i].y) > delta)){
            prev.x = Va[i].x;
            prev.y = Va[i].y;
            Result.push_back(Va[i]);
        }
    }
   }
   */
}

//--------------------------------------------------------------

void testApp::draw(){
    //ofClear(0,0,20);
        glBegin(GL_POINTS);
            glColor3f(0.0,0.0,1.0);
           // if(Result.size() > 1)
                //glVertex2f(100+(double)Rung.getT()*10000,525-(double)Rung.CurrVect.Vbe*10000);
	    glVertex2f(100+(double)(Rung.CurrVect.Vbe)*600,525-(double)(Rung.CurrVect.Vce)*600);
        glEnd();
	   // else
       //         glVertex2f(640,412);
           /* glVertex2f(640,412);
        glEnd();
        glBegin(GL_POINTS);
            glColor3f(1.0,0.0,0.0);
            for(int i=0;i<Result.size();i++)
                glVertex2f(640+Result[i].x,412-Result[i].y);
*/
    //ofDrawBitmapString(ofToString(Rung.getT()),10,10);
	printf("%f,%f\n",100+(double)(Rung.CurrVect.Vbe)*600,525-(double)(Rung.CurrVect.Vce)*600);
}

//--------------------------------------------------------------
void testApp::keyPressed(int key){

}

//--------------------------------------------------------------
void testApp::keyReleased(int key){

}

//--------------------------------------------------------------
void testApp::mouseMoved(int x, int y ){
}

//--------------------------------------------------------------
void testApp::mouseDragged(int x, int y, int button){

}

//--------------------------------------------------------------
void testApp::mousePressed(int x, int y, int button){

}

//--------------------------------------------------------------
void testApp::mouseReleased(int x, int y, int button){

}

//--------------------------------------------------------------
void testApp::windowResized(int w, int h){

}

//--------------------------------------------------------------
void testApp::gotMessage(ofMessage msg){

}

//--------------------------------------------------------------
void testApp::dragEvent(ofDragInfo dragInfo){

}

